import os
import time
import platform

PROTO_DIR = 'def'
GENERATED_DIR = '.'

if not os.path.exists(GENERATED_DIR):
    os.makedirs(GENERATED_DIR)
    print(f"Create Directory {GENERATED_DIR}")

PROTO_LIST = [
    'login',
    'appearance',
    # 'chat'
]

CALLBACK_EXCEPT = [
    'CS_LoginRequest'
]

current_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())
VERSION = '0.1'

proto_data = []

for val in PROTO_LIST:
    with open(os.path.join(PROTO_DIR, val + '.proto'), 'r', encoding='utf-8') as file:
        package = {'list': []}

        line = file.readline()
        while line:
            line = line.strip()

            if line.startswith('package'):
                package['package'] = line[8:-1].strip()

            if line.startswith('message'):
                line = line[8:-1].strip()
                if line.startswith('CS'):
                    if line in CALLBACK_EXCEPT:
                        package['list'].append({'proto': line, 'callback': 0})
                    else:
                        package['list'].append({'proto': line, 'callback': 1})

                if line.startswith("SC"):
                    package['list'].append({'proto': line, 'callback': 0})

            line = file.readline()

        proto_data.append(package)

# print(proto_list)

with open(os.path.join(GENERATED_DIR, 'ProtoType.generated.h'), 'w', encoding='utf-8') as file:
    file.write('''/**
 * Protocol ID define here by enum class
 * This file is generated by Python script. Do not edit!!!
 * Generated time: %s
 * Python version: v%s
 * Script version: v%s
 */\n\n''' % (current_time, platform.python_version(), VERSION))

    file.write('#pragma once\n\n')
    file.write('#include <cstdint>\n\n')

    file.write('namespace protocol {\n')
    file.write('\tenum class ProtoType : uint32_t {\n')

    package_index = 1
    proto_index = 1

    for package in proto_data:
        proto_index = 1
        file.write('\t\t// %s\n' % package['package'])

        for proto in package['list']:
            file.write('\t\t%s = %d,\n' % (proto['proto'], package_index * 1000 + proto_index))
            proto_index += 1

        file.write('\n')
        package_index += 1

    file.write('\t\tPROTO_TYPE_MAX,\n')    

    file.write('\t}; // ProtoType\n')
    file.write('} // protocol')

with open(os.path.join(GENERATED_DIR, 'Protocol.generated.h'), 'w', encoding='utf-8') as file:
    file.write('''/**
 * Protocol callback function define here.
 * This file is generated by Python script. Do not edit!!!
 * Generated time: %s
 * Python version: v%s
 * Script version: v%s
 */\n\n''' % (current_time, platform.python_version(), VERSION))

    file.write('#pragma once\n\n')
    file.write('#include <memory>\n')
    file.write('#include <asio.hpp>\n\n')

    file.write('''namespace base {
\tclass Package;
\tclass Player;
\tusing ConnectionPointer = std::shared_ptr<class Connection>;
}\n
''')

    file.write('namespace protocol {\n')
    file.write('using asio::awaitable;\n\n')

    for package in proto_data:
        file.write('\t// %s\n' % package['package'])

        for proto in package['list']:
            if proto['callback'] == 1:
                file.write('\tawaitable<void> %s(const std::shared_ptr<base::Player> &plr, base::Package *pkg);\n' % proto['proto'])

        file.write('\n')

    file.write('} // protocol')

with open(os.path.join(GENERATED_DIR, 'Protocol.generated.cpp'), 'w', encoding='utf-8') as file:
    file.write('''/**
 * Register protocol callback to base::UProtocolSystem
 * This file is generated by Python script. Do not edit!!!
 * Generated time: %s
 * Python version: v%s
 * Script version: v%s
 */\n\n''' % (current_time, platform.python_version(), VERSION))

    file.write('#include "Protocol.generated.h"\n')
    file.write('#include "ProtoType.generated.h"\n\n')

    file.write('#include "../src/system/protocol/ProtocolSystem.h"\n\n')

    file.write('void base::ProtocolSystem::RegisterProtocol() const {\n')
    file.write('\tusing namespace protocol;\n')

    for package in proto_data:
        file.write('\t// %s\n' % package['package'])

        for proto in package['list']:
            if proto['callback'] == 1:
                file.write('\tREGISTER_PROTOCOL(%s)\n' % proto['proto'])

        file.write('\n')

    file.write('}')