import platform
import os

VERSION = '0.1'

def generate_protobuf_define(src: str, dist: str, proto: list, expt: list):
    """生成协议枚举类型、回调函数声明头文件和回调注册源文件"""
    assert src, 'proto输入路径错误'
    assert dist, 'proto输出路径错误'

    print('proto 输入路径: ' + os.getcwd() + '\\' + src)
    print('proto 输出路径: ' + os.getcwd() + '\\' + dist)

    if not os.path.exists(dist):
        os.makedirs(dist)
        print("创建协议相关文件夹")

    proto_data = []

    for val in proto:


    # for root, dirs, files in os.walk(src):
    #     for file in files:
    #         if not file.endswith('.proto'):
    #             continue

        with open(os.path.join(src, val + '.proto'), 'r', encoding='utf-8') as file:
            package = {'list': []}

            line = file.readline()
            while line:
                line = line.strip()

                if line.startswith('package'):
                    package['package'] = line[8:-1].strip()

                if line.startswith('message'):
                    line = line[8:-1].strip()
                    if line.startswith('CS'):
                        if line in expt:
                            package['list'].append({'proto': line, 'callback': 0})
                        else:
                            package['list'].append({'proto': line, 'callback': 1})

                    if line.startswith("SC"):
                        package['list'].append({'proto': line, 'callback': 0})

                line = file.readline()

            proto_data.append(package)

            print("\t已加载 %s" % file.name)


    with open(os.path.join(dist, 'ProtoType.gen.h'), 'w', encoding='utf-8') as file:
        file.write('''/**
 * Protocol ID define here by enum class
 * This file is generated by Python script. Do not edit!!!
 * Python version: v%s
 * Script version: v%s
 */\n\n''' % (platform.python_version(), VERSION))

        file.write('#pragma once\n\n')
        file.write('#include <cstdint>\n\n')

        file.write('namespace protocol {\n')
        file.write('\tenum class EProtoType : uint32_t {\n')

        package_index = 1
        proto_index = 1

        for package in proto_data:
            proto_index = 1
            file.write('\t\t// %s\n' % package['package'])

            for proto in package['list']:
                pkg_id = package_index * 1000 + proto_index
                file.write('\t\t%s = %d,\n' % (proto['proto'], pkg_id))

                proto_index += 1

            file.write('\n')
            package_index += 1

        file.write('\t\tPROTO_TYPE_MAX,\n')
        file.write('\t}; // EProtoType\n\n')

        file.write('\tconstexpr const char* ProtoTypeToString(const EProtoType value) {\n')
        file.write('\t\tswitch (value) {\n')

        for package in proto_data:
            file.write('\t\t\t// %s\n' % package['package'])

            for proto in package['list']:
                file.write('\t\t\tcase EProtoType::%s: return "%s";\n' % (proto['proto'], proto['proto']))

            file.write('\n')

        file.write('\t\t\tdefault: return "UNDEFINED";\n')
        file.write('\t\t} // switch\n')
        file.write('\t}\n\n')
    
        file.write('} // protocol')

    with open(os.path.join(dist, 'Protocol.gen.h'), 'w', encoding='utf-8') as file:
        file.write('''/**
 * Protocol callback function define here.
 * This file is generated by Python script. Do not edit!!!
 * Python version: v%s
 * Script version: v%s
 */\n\n''' % (platform.python_version(), VERSION))

        file.write('#pragma once\n\n')
        file.write('#include <asio.hpp>\n')
        file.write('#include <memory>\n\n')

        file.write('class IPackage;\n')
        file.write('using AConnectionPointer = std::shared_ptr<class UConnection>;\n')
        file.write('class ICharacter;\n\n')

        file.write('namespace protocol {\n\n')
        file.write('\t using asio::awaitable;\n\n')

        for package in proto_data:
            file.write('\t// %s\n' % package['package'])

            for proto in package['list']:
                if proto['callback'] == 1:
                    file.write('\tawaitable<void> %s(const std::shared_ptr<ICharacter> &plr, IPackage *pkg);\n' % proto['proto'])

            file.write('\n')

        file.write('} // protocol\n\n')

        file.write('#include "ProtoType.gen.h"\n')
        file.write('#include "../../src/system/protocol/ProtocolSystem.h"\n\n')

        file.write('inline void LoadProtocol(UProtocolSystem *sys) {\n\n')
        file.write('\tusing namespace protocol;\n\n')

        for package in proto_data:
            file.write('\t// %s\n' % package['package'])

            for proto in package['list']:
                if proto['callback'] == 1:
                    file.write('\tREGISTER_PROTOCOL(%s)\n' % proto['proto'])

            file.write('\n')

        file.write('}')

#     with open(os.path.join(dist, 'Protocol.generated.cpp'), 'w', encoding='utf-8') as file:
#         file.write('''/**
#  * Register protocol callback to base::UProtocolSystem
#  * This file is generated by Python script. Do not edit!!!
#  * Python version: v%s
#  * Script version: v%s
#  */\n\n''' % (platform.python_version(), VERSION))

#         file.write('#include "Protocol.generated.h"\n')
#         file.write('#include "ProtoType.generated.h"\n\n')

#         file.write('#include "../src/system/protocol/ProtocolSystem.h"\n\n')

#         file.write('void base::ProtocolSystem::RegisterProtocol() const {\n')
#         file.write('\tusing namespace protocol;\n')

#         for package in proto_data:
#             file.write('\t// %s\n' % package['package'])

#             for proto in package['list']:
#                 if proto['callback'] == 1:
#                     file.write('\tREGISTER_PROTOCOL(%s)\n' % proto['proto'])

#             file.write('\n')

#         file.write('}')